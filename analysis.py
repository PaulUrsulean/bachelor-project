import tensorflow as tf
import trident
# import train_bow as bow
# import pipeline as pipe
import numpy as np
import timeit
from collections import defaultdict

fb = trident.Db("fb15k")

rels = np.unique(fb.all_p())

found = []

bins = defaultdict(list)

for rel in rels:
	bins[int((fb.count_p(rel)-1)/100)].append(rel)

count = np.vectorize(lambda i: fb.count_p(i))

for key in bins.keys():
	bins[key] = sum(count(bins[key]))


# a = []

# for i in range(15):
# 	a.append(sum(count(bins[i])))

keys = sorted(list(bins.keys()))
vals = []
for key in keys:
	vals.append(bins[key])

print(keys)
print(vals)









# Sanity check
# print(np.all(rels == np.arange(fb.n_relations())))

# Create data for histogram

# freqs = np.empty(len(rels), np.int64)
# for i in range(len(rels)):
# 	freqs[i] = fb.count_p(i)

# print(list(freqs))

# [14921, 123, 652, 1601, 14921, 15837, 6363, 11638, 11594, 2788, 937, 59, 8945, 795, 750, 19764, 165, 4566, 432, 320, 6363, 1418, 221, 349, 710, 833, 460, 1144, 596, 3222, 726, 517, 3441, 495, 2337, 3039, 41, 919, 884, 221, 14220, 7632, 2853, 654, 266, 227, 1144, 215, 523, 2495, 1471, 993, 859, 95, 855, 2751, 11594, 11638, 4037, 1196, 1905, 307, 7632, 4320, 4534, 1541, 660, 2337, 1601, 8946, 1040, 2853, 1279, 3716, 3716, 3142, 6931, 162, 802, 868, 422, 1310, 1179, 93, 2788, 266, 154, 3219, 3559, 654, 3236, 1040, 336, 3039, 10378, 3236, 4320, 3339, 7229, 734, 5128, 2174, 2751, 1039, 191, 170, 7232, 540, 715, 420, 4680, 3441, 660, 7229, 1279, 1379, 655, 489, 74, 3339, 1541, 579, 244, 915, 919, 235, 7400, 200, 901, 988, 2393, 322, 423, 1310, 2552, 51, 263, 14220, 3219, 245, 702, 6, 2788, 2622, 162, 197, 421, 4037, 654, 3222, 984, 6931, 478, 31, 381, 3559, 795, 763, 2622, 702, 763, 2785, 406, 460, 983, 654, 136, 802, 3274, 553, 420, 583, 313, 1013, 763, 2785, 432, 1905, 1587, 145, 884, 1710, 122, 426, 528, 62, 11, 156, 93, 763, 855, 1196, 2393, 116, 988, 127, 901, 7232, 456, 993, 482, 568, 30, 1884, 539, 2174, 915, 24, 51, 405, 7400, 377, 406, 967, 937, 918, 2946, 710, 196, 967, 19, 99, 868, 215, 79, 179, 143, 732, 16, 967, 9, 457, 213, 369, 967, 596, 421, 2495, 385, 503, 409, 85, 918, 5, 28, 655, 72, 287, 967, 287, 224, 2785, 113, 46, 256, 882, 495, 322, 73, 884, 120, 378, 179, 618, 478, 11, 906, 482, 478, 6, 517, 30, 227, 11, 70, 355, 73, 137, 426, 44, 503, 221, 1418, 1762, 134, 10, 58, 66, 74, 379, 245, 313, 409, 588, 261, 133, 181, 9, 1587, 247, 66, 143, 133, 284, 24, 284, 1201, 431, 191, 732, 456, 426, 41, 133, 215, 379, 336, 426, 264, 143, 19, 196, 136, 7, 82, 6, 233, 304, 109, 331, 29, 52, 224, 171, 102, 460, 659, 307, 141, 78, 1201, 104, 874, 53, 37, 191, 229, 11, 236, 355, 489, 150, 1379, 264, 582, 110, 582, 179, 882, 385, 43, 191, 51, 618, 11, 72, 15, 35, 133, 77, 261, 272, 46, 154, 177, 29, 150, 320, 845, 51, 191, 1339, 116, 81, 165, 288, 162, 460, 8, 24, 528, 352, 431, 151, 26, 84, 46, 460, 7, 369, 731, 233, 113, 606, 224, 122, 20, 215, 245, 123, 8, 40, 81, 221, 63, 36, 165, 148, 59, 381, 88, 77, 13, 53, 523, 51, 182, 182, 11, 155, 553, 263, 20, 405, 275, 200, 22, 137, 19, 117, 99, 53, 42, 147, 45, 46, 47, 191, 45, 220, 256, 168, 151, 26, 88, 117, 23, 26, 78, 41, 4, 89, 51, 32, 298, 31, 64, 136, 20, 325, 88, 233, 215, 150, 41, 59, 88, 85, 15, 182, 156, 19, 87, 18, 231, 156, 127, 10, 95, 29, 233, 112, 213, 45, 225, 153, 123, 81, 478, 32, 43, 123, 52, 377, 78, 129, 35, 136, 51, 264, 13, 51, 13, 6, 164, 200, 15, 5, 23, 29, 30, 128, 6, 77, 23, 35, 104, 29, 7, 23, 77, 2, 29, 20, 31, 84, 51, 79, 56, 24, 116, 78, 200, 122, 54, 13, 50, 165, 97, 325, 2, 18, 129, 51, 48, 51, 215, 109, 130, 38, 5, 62, 48, 131, 7, 8, 37, 77, 42, 122, 8, 20, 85, 21, 132, 5, 69, 36, 13, 15, 21, 38, 171, 181, 49, 171, 66, 102, 64, 18, 192, 81, 148, 29, 5, 14, 7, 16, 7, 93, 204, 81, 51, 5, 167, 28, 94, 52, 63, 61, 89, 8, 36, 43, 171, 66, 36, 62, 16, 39, 13, 20, 39, 19, 44, 4, 78, 37, 36, 38, 51, 64, 90, 97, 17, 19, 235, 38, 145, 9, 58, 31, 33, 35, 22, 24, 13, 26, 78, 4, 41, 26, 16, 47, 12, 120, 13, 90, 89, 58, 23, 170, 6, 134, 112, 17, 24, 15, 21, 58, 3, 164, 18, 29, 44, 11, 5, 8, 78, 72, 5, 9, 51, 9, 98, 94, 7, 74, 26, 5, 39, 26, 23, 17, 37, 62, 23, 45, 29, 3, 5, 59, 23, 31, 28, 24, 35, 6, 53, 32, 18, 11, 6, 7, 28, 10, 74, 39, 26, 4, 43, 2, 15, 15, 12, 10, 27, 43, 85, 6, 22, 36, 31, 57, 130, 69, 2, 89, 6, 20, 12, 2, 39, 32, 10, 32, 46, 29, 6, 33, 17, 24, 19, 5, 20, 25, 23, 41, 46, 9, 2, 59, 131, 20, 39, 9, 4, 82, 67, 3, 28, 32, 8, 92, 19, 33, 69, 8, 12, 41, 88, 53, 11, 10, 3, 21, 22, 40, 63, 52, 19, 26, 41, 6, 72, 32, 17, 16, 29, 2, 12, 23, 16, 22, 3, 11, 36, 17, 34, 49, 19, 39, 5, 6, 5, 59, 28, 8, 8, 10, 64, 9, 6, 9, 34, 3, 16, 5, 5, 56, 23, 18, 7, 14, 18, 2, 26, 33, 13, 3, 28, 8, 31, 44, 29, 16, 13, 7, 14, 4, 7, 7, 23, 81, 2, 14, 24, 9, 25, 3, 73, 8, 30, 13, 29, 53, 16, 21, 29, 39, 6, 6, 19, 2, 82, 19, 35, 17, 6, 22, 51, 6, 12, 6, 2, 19, 9, 11, 10, 4, 6, 26, 13, 6, 10, 19, 23, 3, 12, 13, 19, 29, 5, 23, 29, 24, 4, 2, 5, 61, 9, 19, 14, 10, 5, 5, 24, 3, 15, 24, 8, 7, 44, 18, 8, 21, 11, 3, 20, 22, 44, 8, 15, 22, 9, 3, 6, 4, 17, 12, 13, 8, 2, 9, 7, 33, 13, 4, 5, 2, 4, 2, 2, 4, 3, 20, 18, 5, 14, 13, 23, 5, 1, 11, 22, 5, 7, 4, 13, 3, 24, 6, 3, 31, 2, 8, 1, 6, 19, 2, 6, 10, 9, 7, 19, 8, 3, 2, 1, 18, 11, 3, 3, 4, 3, 9, 6, 6, 3, 7, 2, 3, 10, 10, 13, 8, 4, 2, 19, 2, 9, 2, 4, 4, 2, 2, 8, 11, 4, 7, 12, 13, 3, 3, 3, 1, 6, 6, 8, 24, 5, 15, 22, 16, 7, 5, 8, 12, 5, 1, 8, 9, 1, 4, 3, 5, 3, 1, 13, 8, 5, 1, 9, 7, 21, 2, 2, 1, 7, 19, 8, 8, 8, 13, 6, 2, 5, 6, 8, 5, 7, 3, 8, 2, 7, 5, 2, 1, 9, 4, 4, 5, 16, 5, 1, 6, 1, 1, 9, 2, 7, 15, 13, 8, 1, 2, 2, 5, 6, 2, 1, 11, 7, 5, 6, 1, 1, 5, 2, 16, 10, 10, 1, 2, 7, 1, 13, 3, 1, 2, 5, 2, 1, 5, 4, 1, 7, 8, 5, 5, 2, 3, 2, 11, 1, 5, 7, 2, 1, 2, 5, 2, 1, 2, 1, 15, 1, 4, 2, 5, 4, 1, 1, 1, 1, 3, 4, 1, 4, 10, 2, 1, 2, 4, 3, 11, 1, 2, 2, 3, 3, 2, 2, 6, 3, 1, 3, 2, 2, 2, 1, 19, 1, 1, 1, 2, 2, 4, 3, 5, 1, 6, 1, 2, 4, 2, 2, 2, 1, 1, 1, 1, 2, 3, 1, 2, 4, 5, 13, 4, 3, 7, 2, 2, 5, 5, 2, 9, 1, 3, 2, 3, 2, 1, 4, 1, 2, 4, 2, 2, 1, 3, 1, 2, 1, 2, 6, 2, 7, 2, 1, 2, 2, 1, 4, 1, 1, 5, 3, 2, 2, 4, 1, 2, 1, 2, 1, 7, 1, 4, 2, 1, 1, 2, 2, 2, 1, 1, 5, 2, 2, 2, 1, 1, 4, 3, 3, 2, 3, 3, 1, 1, 4, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 4, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 4, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
# 14921, 123, 652, 1601, 14921, 15837, 6363, 11638, 11594, 2788, 937, 59, 8945, 795, 750, 19764, 165, 4566, 432, 320, 6363, 1418, 221, 349, 710, 833, 460, 1144, 596, 3222, 726, 517, 3441, 495, 2337, 3039, 41, 919, 884, 221, 14220, 7632, 2853, 654, 266, 227, 1144, 215, 523, 2495, 1471, 993, 859, 95, 855, 2751, 11594, 11638, 4037, 1196, 1905, 307, 7632, 4320, 4534, 1541, 660, 2337, 1601, 8946, 1040, 2853, 1279, 3716, 3716, 3142, 6931, 162, 802, 868, 422, 1310, 1179, 93, 2788, 266, 154, 3219, 3559, 654, 3236, 1040, 336, 3039, 10378, 3236, 4320, 3339, 7229, 734, 5128, 2174, 2751, 1039, 191, 170, 7232, 540, 715, 420, 4680, 3441, 660, 7229, 1279, 1379, 655, 489, 74, 3339, 1541, 579, 244, 915, 919, 235, 7400, 200, 901, 988, 2393, 322, 423, 1310, 2552, 51, 263, 14220, 3219, 245, 702, 6, 2788, 2622, 162, 197, 421, 4037, 654, 3222, 984, 6931, 478, 31, 381, 3559, 795, 763, 2622, 702, 763, 2785, 406, 460, 983, 654, 136, 802, 3274, 553, 420, 583, 313, 1013, 763, 2785, 432, 1905, 1587, 145, 884, 1710, 122, 426, 528, 62, 11, 156, 93, 763, 855, 1196, 2393, 116, 988, 127, 901, 7232, 456, 993, 482, 568, 30, 1884, 539, 2174, 915, 24, 51, 405, 7400, 377, 406, 967, 937, 918, 2946, 710, 196, 967, 19, 99, 868, 215, 79, 179, 143, 732, 16, 967, 9, 457, 213, 369, 967, 596, 421, 2495, 385, 503, 409, 85, 918, 5, 28, 655, 72, 287, 967, 287, 224, 2785, 113, 46, 256, 882, 495, 322, 73, 884, 120, 378, 179, 618, 478, 11, 906, 482, 478, 6, 517, 30, 227, 11, 70, 355, 73, 137, 426, 44, 503, 221, 1418, 1762, 134, 10, 58, 66, 74, 379, 245, 313, 409, 588, 261, 133, 181, 9, 1587, 247, 66, 143, 133, 284, 24, 284, 1201, 431, 191, 732, 456, 426, 41, 133, 215, 379, 336, 426, 264, 143, 19, 196, 136, 7, 82, 6, 233, 304, 109, 331, 29, 52, 224, 171, 102, 460, 659, 307, 141, 78, 1201, 104, 874, 53, 37, 191, 229, 11, 236, 355, 489, 150, 1379, 264, 582, 110, 582, 179, 882, 385, 43, 191, 51, 618, 11, 72, 15, 35, 133, 77, 261, 272, 46, 154, 177, 29, 150, 320, 845, 51, 191, 1339, 116, 81, 165, 288, 162, 460, 8, 24, 528, 352, 431, 151, 26, 84, 46, 460, 7, 369, 731, 233, 113, 606, 224, 122, 20, 215, 245, 123, 8, 40, 81, 221, 63, 36, 165, 148, 59, 381, 88, 77, 13, 53, 523, 51, 182, 182, 11, 155, 553, 263, 20, 405, 275, 200, 22, 137, 19, 117, 99, 53, 42, 147, 45, 46, 47, 191, 45, 220, 256, 168, 151, 26, 88, 117, 23, 26, 78, 41, 4, 89, 51, 32, 298, 31, 64, 136, 20, 325, 88, 233, 215, 150, 41, 59, 88, 85, 15, 182, 156, 19, 87, 18, 231, 156, 127, 10, 95, 29, 233, 112, 213, 45, 225, 153, 123, 81, 478, 32, 43, 123, 52, 377, 78, 129, 35, 136, 51, 264, 13, 51, 13, 6, 164, 200, 15, 5, 23, 29, 30, 128, 6, 77, 23, 35, 104, 29, 7, 23, 77, 2, 29, 20, 31, 84, 51, 79, 56, 24, 116, 78, 200, 122, 54, 13, 50, 165, 97, 325, 2, 18, 129, 51, 48, 51, 215, 109, 130, 38, 5, 62, 48, 131, 7, 8, 37, 77, 42, 122, 8, 20, 85, 21, 132, 5, 69, 36, 13, 15, 21, 38, 171, 181, 49, 171, 66, 102, 64, 18, 192, 81, 148, 29, 5, 14, 7, 16, 7, 93, 204, 81, 51, 5, 167, 28, 94, 52, 63, 61, 89, 8, 36, 43, 171, 66, 36, 62, 16, 39, 13, 20, 39, 19, 44, 4, 78, 37, 36, 38, 51, 64, 90, 97, 17, 19, 235, 38, 145, 9, 58, 31, 33, 35, 22, 24, 13, 26, 78, 4, 41, 26, 16, 47, 12, 120, 13, 90, 89, 58, 23, 170, 6, 134, 112, 17, 24, 15, 21, 58, 3, 164, 18, 29, 44, 11, 5, 8, 78, 72, 5, 9, 51, 9, 98, 94, 7, 74, 26, 5, 39, 26, 23, 17, 37, 62, 23, 45, 29, 3, 5, 59, 23, 31, 28, 24, 35, 6, 53, 32, 18, 11, 6, 7, 28, 10, 74, 39, 26, 4, 43, 2, 15, 15, 12, 10, 27, 43, 85, 6, 22, 36, 31, 57, 130, 69, 2, 89, 6, 20, 12, 2, 39, 32, 10, 32, 46, 29, 6, 33, 17, 24, 19, 5, 20, 25, 23, 41, 46, 9, 2, 59, 131, 20, 39, 9, 4, 82, 67, 3, 28, 32, 8, 92, 19, 33, 69, 8, 12, 41, 88, 53, 11, 10, 3, 21, 22, 40, 63, 52, 19, 26, 41, 6, 72, 32, 17, 16, 29, 2, 12, 23, 16, 22, 3, 11, 36, 17, 34, 49, 19, 39, 5, 6, 5, 59, 28, 8, 8, 10, 64, 9, 6, 9, 34, 3, 16, 5, 5, 56, 23, 18, 7, 14, 18, 2, 26, 33, 13, 3, 28, 8, 31, 44, 29, 16, 13, 7, 14, 4, 7, 7, 23, 81, 2, 14, 24, 9, 25, 3, 73, 8, 30, 13, 29, 53, 16, 21, 29, 39, 6, 6, 19, 2, 82, 19, 35, 17, 6, 22, 51, 6, 12, 6, 2, 19, 9, 11, 10, 4, 6, 26, 13, 6, 10, 19, 23, 3, 12, 13, 19, 29, 5, 23, 29, 24, 4, 2, 5, 61, 9, 19, 14, 10, 5, 5, 24, 3, 15, 24, 8, 7, 44, 18, 8, 21, 11, 3, 20, 22, 44, 8, 15, 22, 9, 3, 6, 4, 17, 12, 13, 8, 2, 9, 7, 33, 13, 4, 5, 2, 4, 2, 2, 4, 3, 20, 18, 5, 14, 13, 23, 5, 1, 11, 22, 5, 7, 4, 13, 3, 24, 6, 3, 31, 2, 8, 1, 6, 19, 2, 6, 10, 9, 7, 19, 8, 3, 2, 1, 18, 11, 3, 3, 4, 3, 9, 6, 6, 3, 7, 2, 3, 10, 10, 13, 8, 4, 2, 19, 2, 9, 2, 4, 4, 2, 2, 8, 11, 4, 7, 12, 13, 3, 3, 3, 1, 6, 6, 8, 24, 5, 15, 22, 16, 7, 5, 8, 12, 5, 1, 8, 9, 1, 4, 3, 5, 3, 1, 13, 8, 5, 1, 9, 7, 21, 2, 2, 1, 7, 19, 8, 8, 8, 13, 6, 2, 5, 6, 8, 5, 7, 3, 8, 2, 7, 5, 2, 1, 9, 4, 4, 5, 16, 5, 1, 6, 1, 1, 9, 2, 7, 15, 13, 8, 1, 2, 2, 5, 6, 2, 1, 11, 7, 5, 6, 1, 1, 5, 2, 16, 10, 10, 1, 2, 7, 1, 13, 3, 1, 2, 5, 2, 1, 5, 4, 1, 7, 8, 5, 5, 2, 3, 2, 11, 1, 5, 7, 2, 1, 2, 5, 2, 1, 2, 1, 15, 1, 4, 2, 5, 4, 1, 1, 1, 1, 3, 4, 1, 4, 10, 2, 1, 2, 4, 3, 11, 1, 2, 2, 3, 3, 2, 2, 6, 3, 1, 3, 2, 2, 2, 1, 19, 1, 1, 1, 2, 2, 4, 3, 5, 1, 6, 1, 2, 4, 2, 2, 2, 1, 1, 1, 1, 2, 3, 1, 2, 4, 5, 13, 4, 3, 7, 2, 2, 5, 5, 2, 9, 1, 3, 2, 3, 2, 1, 4, 1, 2, 4, 2, 2, 1, 3, 1, 2, 1, 2, 6, 2, 7, 2, 1, 2, 2, 1, 4, 1, 1, 5, 3, 2, 2, 4, 1, 2, 1, 2, 1, 7, 1, 4, 2, 1, 1, 2, 2, 2, 1, 1, 5, 2, 2, 2, 1, 1, 4, 3, 3, 2, 3, 3, 1, 1, 4, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 4, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 4, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1


# def f1():
# 	return np.argwhere(np.arange(100) > 50).flatten()

# def f2():
# 	return [i for i, v in enumerate(np.arange(100)) if i>50]

# print(timeit.timeit(f1, number = 100000))
# print(timeit.timeit(f2, number = 100000))


# def f(batch_size, test_rel_id=None):

# 	# Initialize batcher
# 	batcher = trident.Batcher("fb15k", batch_size, 1)
# 	batcher.start()
# 	batch = batcher.getbatch()

# 	model, vectorizer = bow.get_model()

# 	indices = np.linspace(0, batch_size-1, batch_size, dtype=np.int64)


# 	if test_rel_id is not None and isinstance(test_rel_id, int):

# 		heads 	= []
# 		rels 	= []
# 		tails 	= []

# 		while len(rels) <= batch_size:

# 			indices	 = [index for index, elem in enumerate(batch[1]) if elem == test_rel_id]

# 			heads 	+= [batch[0][i] for i in indices]
# 			rels 	+= [batch[1][i] for i in indices]
# 			tails 	+= [batch[2][i] for i in indices]

# 			batch 	 = batcher.getbatch()

# 		heads = heads[:batch_size]
# 		rels = rels[:batch_size]
# 		tails = tails[:batch_size]

# 	else:

# 		heads 		= batch[0]
# 		rels 		= batch[1]
# 		tails 		= batch[2]

# 	fun = lambda i: model.predict(bow.feature_vector(vectorizer, heads, rels, [tails[i]] * len(tails)))

# 	a = np.empty([0,batch_size])

# 	for i in range(batch_size):
# 		a = np.append(a, [fun(i)], axis=0)

# 	return a


# print(f(10, 0) == pipe.get_mean_rank("./models_fb", "./fb15k", 0))


# # if forward:

# # 	fun = lambda i: model.predict(bow.feature_vector(vectorizer, h, r, [t[i]] * len(t)))

# # else:
# # 	fun = lambda i: model.predict(bow.feature_vector(vectorizer, [h[i]] * len(h), r, t))

# # predicted = tf.py_func(fun, [i], tf.float64)


# # return tf.nn.top_k(predicted, batch_size)